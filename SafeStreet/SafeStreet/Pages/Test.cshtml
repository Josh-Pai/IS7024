@page
@model SafeStreet.Pages.TestModel
@{
    ViewData["Title"] = "Crime Data Analysis";
}

<h1>Crime Data Analysis</h1>

<!-- Map and Search Box -->
<div id="map-container">
    <input id="search-box" type="text" placeholder="Search for a place..." value="@Model.SearchNeighborhood" />
    <div id="map"></div>
</div>

<!-- Score Section -->
<div class="safety-score-card">
    <h3><i class="fas fa-shield-alt"></i> Neighborhood Safety Score</h3>
    <div class="circle-score" id="circleScore">
        <span id="safetyScore">--</span>
    </div>
    <div class="score-bar">
        <div class="score-progress" id="scoreProgress"></div>
    </div>
    <div class="score-labels">
        <span>High Risk</span>
        <span>Moderate</span>
        <span>Very Safe</span>
    </div>
</div>

<!-- Statistics Section -->
<div id="statistics">
    <h2>Crime Statistics (Nearby - 1 km Radius)</h2>
    <p><strong>Last 3 Month:</strong> <span id="totalLast3Months">-</span></p>
    <p><strong>Last 6 Months:</strong> <span id="totalLast6Months">-</span></p>
    <p><strong>Last 9 Months:</strong> <span id="totalLast9Months">-</span></p>
    <p><strong>Last 1 Year:</strong> <span id="totalLast1Year">-</span></p>

    <h3>Crime Numbers Aggregated by Type</h3>
    <table id="typeStatsTable" border="1" style="width: 100%; text-align: left; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Incidents</th>
                <th>Last 3 Months</th>
                <th>Last 6 Months</th>
                <th>Last 9 Months</th>
                <th>Last 1 Year</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be dynamically inserted here -->
        </tbody>
    </table>
</div>



@section Scripts {
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCqP_MugU3SwtJMIOC_fZ562NoWCbklz3Q&libraries=places&callback=initMap" async defer></script>
    <script>
        let map, searchBox, geocoder;

        function initMap() {
            const initialLocation = { lat: 39.1031, lng: -84.5120 }; // Default to Cincinnati
            map = new google.maps.Map(document.getElementById('map'), {
                center: initialLocation,
                zoom: 12
            });

            // Initialize geocoder
            geocoder = new google.maps.Geocoder();

            // Initialize the search box
            const input = document.getElementById('search-box');
            searchBox = new google.maps.places.SearchBox(input);

            // Bias the search box results towards the current map bounds
            map.addListener('bounds_changed', () => {
                searchBox.setBounds(map.getBounds());
            });

            // Listen for the user's search selection
            searchBox.addListener('places_changed', () => {
                const places = searchBox.getPlaces();
                if (places.length === 0) return;

                const place = places[0]; // Use the first place selected
                if (!place.geometry || !place.geometry.location) return;

                const latitude = place.geometry.location.lat();
                const longitude = place.geometry.location.lng();

                // Center the map on the selected place
                map.setCenter(place.geometry.location);
                map.setZoom(14);

                // Fetch stats for the selected location
                fetchCrimeStats(latitude, longitude);
                console.log(latitude, longitude)
            });

            // Listen for map click events
            map.addListener('click', (event) => {
                const latitude = event.latLng.lat();
                const longitude = event.latLng.lng();

                // Use Reverse Geocoding to get the address of the clicked location
                geocoder.geocode({ location: { lat: latitude, lng: longitude } }, (results, status) => {
                    if (status === "OK" && results[0]) {
                        // Update the search box with the formatted address
                        input.value = results[0].formatted_address;
                    } else {
                        console.error("Geocoder failed due to: " + status);
                    }
                });

                // Fetch stats for the clicked location
                fetchCrimeStats(latitude, longitude);
                console.log(latitude, longitude)
            });
        }


        function updateSafetyScore(score) {
            // Update the circular score
            const scoreElement = document.getElementById('safetyScore');
            scoreElement.textContent = score;

            // Update the progress bar
            const circleElement = document.getElementById('circleScore');
            const progressElement = document.getElementById('scoreProgress');
            const percentage = Math.min(Math.max(score, 0), 100); // Clamp between 0 and 100
            progressElement.style.width = `${percentage}%`;

            // Update color based on the score
            if (score < 35) {
                circleElement.style.backgroundColor = '#f44336'; // Red for High Risk
                progressElement.style.backgroundColor = '#f44336';
            } else if (score < 70) {
                circleElement.style.backgroundColor = '#ff9800'; // Orange for Moderate
                progressElement.style.backgroundColor = '#ff9800';
            } else {
                circleElement.style.backgroundColor = '#4caf50'; // Green for Very Safe
                progressElement.style.backgroundColor = '#4caf50';
            }
        }

        async function fetchCrimeStats(latitude, longitude) {
            try {
                document.getElementById('totalLast3Months').textContent = "Loading...";
                document.getElementById('totalLast6Months').textContent = "Loading...";
                document.getElementById('totalLast9Months').textContent = "Loading...";
                document.getElementById('totalLast1Year').textContent = "Loading...";

                const response = await fetch(`/Test?handler=CrimeStatsNearby&latitude=${latitude}&longitude=${longitude}`);
                if (!response.ok) {
                    console.error("Error fetching crime stats");
                    return;
                }

                const stats = await response.json();
                console.log("stats: ", stats)

                // Update Safety Score
                updateSafetyScore(stats.safetyScore);
                console.log("score2: ", stats.safetyScore)

                // Update the statistics in the UI
                const totalStats = stats.totalCrimeStats;
                console.log(totalStats)
                document.getElementById('totalLast3Months').textContent = totalStats.last3Months;
                document.getElementById('totalLast6Months').textContent = totalStats.last6Months;
                document.getElementById('totalLast9Months').textContent = totalStats.last9Months;
                document.getElementById('totalLast1Year').textContent = totalStats.last1Year;

                // Update crime numbers by type
                const typeStats = stats.crimeTypeStats;
                const tableBody = document.getElementById('typeStatsTable').querySelector('tbody');
                tableBody.innerHTML = ""; // Clear existing rows

                typeStats.forEach(typeStat => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${typeStat.type}</td>
                        <td>${typeStat.last3Months}</td>
                        <td>${typeStat.last6Months}</td>
                        <td>${typeStat.last9Months}</td>
                        <td>${typeStat.last1Year}</td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error("Error fetching crime stats:", error);
            }
        }
    </script>
    <style>
        #map-container {
            position: relative;
            width: 100%;
            height: 500px;
        }

        #map {
            width: 100%;
            height: 100%;
        }

        #search-box {
            position: absolute;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 5;
            width: 300px;
            height: 40px;
            font-size: 14px;
            padding: 5px 10px;
            border: none;
            outline: none;
            background: white;
            border-radius: 5px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        .safety-score-card {
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            width: 300px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            background-color: #fff;
        }

            .safety-score-card h3 {
                font-size: 18px;
                margin-bottom: 20px;
                color: #333;
            }

        .circle-score {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background-color: #4caf50;
            color: #fff;
            font-size: 30px;
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto;
        }

        .score-bar {
            margin: 20px 0;
            width: 100%;
            height: 10px;
            background-color: #f1f1f1;
            border-radius: 5px;
            overflow: hidden;
        }

        .score-progress {
            height: 100%;
            background-color: #4caf50;
            width: 0;
            transition: width 0.5s ease;
        }

        .score-labels {
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            color: #777;
        }

        #statistics {
            margin-top: 20px;
        }

            #statistics p {
                font-size: 16px;
            }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f4f4f4;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }s
    </style>
}
